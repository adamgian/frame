	// ---------------------------------------------------------------------------------
// _mixin.scss
// ---------------------------------------------------------------------------------

// Mixins
//  ├─ Sizing
//  ├─ Positioning
//  ├─ Responsive breakpoints
//  └─ Fluid type

@use 'sass:map';
@use 'function';
@use 'variable';




// ---------------------------------------------------------------------------------
// Mixins
// ---------------------------------------------------------------------------------

// Sizing --------------------------------------------------------------------------

// A nicer way to define the width and height of a element.
// Set the width and height in any valid unit. Alternatively
// pass in only one parameter to set both width and height
// to that value.
// use cases:
//   – @include size( 100%, 100px );
//   - @include size( 35px );

@mixin size($width, $height:$width) {
	height: $height;
	width: $width;
}


// Positioning ---------------------------------------------------------------------

// Compact solution to setting a position (absolute, fixed or
// relative) and its offset/s.
// use cases:
//   – @include absolute( top left bottom right );
//   – @inlcude fixed( bottom 2px right 50% );
//   – @include relative( left -5px );
//   – @include relative( left initial right auto top inherit );
//
// This is Hugo Giraudel's implementation, more infomation here:
// http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/

@mixin absolute($args:()) {
	@include position(absolute, $args);
}

@mixin fixed( $args:() ) {
	@include position(fixed, $args);
}

@mixin relative($args:()) {
	@include position(relative, $args);
}

@function is-valid-length($value) {
	@return (type-of($value) == "number" and not unitless($value))
		or (index(auto initial inherit 0, $value) != null);
}

@mixin position($position, $args:()) {
	position: $position;
	$offsets: top right bottom left;

	@each $offset in $offsets {
		$index: index($args, $offset);

		@if $index {

			@if $index == length($args) {
				#{$offset}: 0;
			}

			@else {
				$next: nth($args, $index + 1);

				@if is-valid-length($next) {
					#{$offset}: $next;
				}

				@else if index($offsets, $next) {
					#{$offset}: 0;
				}

				@else {
					@warn "Invalid value `#{$next}` for offset `#{$offset}`.";
				}

			}

		}

	}

}


// Responsive breakpoints ----------------------------------------------------------

@mixin breakpoint($start, $end:null) {

	$breakpoints: (
		xs: variable.$breakpoint--xs,
		s: variable.$breakpoint--s,
		m: variable.$breakpoint--m,
		l: variable.$breakpoint--l
	);

	// Run checks to see if arguments are one of the keywords
	// (extra-small, small, medium, large and extra-large)
	@if map.has-key($breakpoints, $start) {
		$start: map.get($breakpoints, $start);
	}

	@if $end != null and map.has-key($breakpoints, $end) {
		$end: map.get($breakpoints, $end);
	}

	//
	@if $start and $end == null {
		@media (min-width: $start) {
			@content;
		}
	}
	@else if $start and $end {
		@media (min-width: $start) and (max-width: $end - 1) {
			@content;
		}
	}

}


// Fluid type ----------------------------------------------------------------------

// Fluid type sizes based in size of viewport width.
// Note: params must be all of the same unit type (ie. all
// px or em) for the algorithm to work.
// use cases:
//   – @include fluid-type(15px, 20px, 375px, 1250px);
//   – @include fluid-type(1em, 1.25em, 48em, 68em);

@mixin fluid-type($font-size--min, $font-size--max, $vw--min, $vw--max) {

	$u1: unit($font-size--min);
	$u2: unit($font-size--max);
	$u3: unit($vw--min);
	$u4: unit($vw--max);

	// Checking that all params have the same unit format.
	@if $u1 == $u2 and $u2 == $u3 and $u3 == $u4 {
		font-size: calc(#{$font-size--min} + #{function.strip-unit($font-size--max - $font-size--min)} * ((100vw - #{$vw--min}) / (#{function.strip-unit($vw--max - $vw--min)})));
	}
	@else {
		@warn "All parameters must be of the same unit type."
	}

}
